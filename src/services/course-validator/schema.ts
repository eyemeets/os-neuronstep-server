import { z } from 'zod'
import { EducationLevel } from '../../types/curricula'

export const SubmissionSchema = z.object({
  valid: z.boolean(),
  reason: z.string(),
  curriculum: z.string().describe('Users chosen curriculum'),
  appropriate_for_curriculum: z.boolean(),
  rejection_reason: z.string(),
  friendly_feedback: z.string(),
  feedback_prompts: z.array(z.string()).optional(),
  user_prompts: z.array(z.string()).optional(),
  content_description: z.string(),
  objective_match: z.boolean(),
  relevance_score: z.number(),
  complexity_score: z.number(),
  educational_level: z.enum([
    EducationLevel.PRESCHOOL,
    EducationLevel.PRIMARY,
    EducationLevel.SECONDARY,
    EducationLevel.UNDERGRADUATE,
    EducationLevel.GRADUATE,
    EducationLevel.DOCTORATE,
    EducationLevel.POSTDOCTORAL
  ]).describe('The educational level, ranging from \'preschool\' to \'postdoctoral\', which defines the target audience and complexity of the course.'),
  missing_information: z.array(z.string()).optional(),
  ethical_compliance: z.boolean(),
  ethical_compliance_details: z.string(),
  learning_outcomes: z.array(z.string()).optional(),
  learning_style: z.enum(['visual', 'auditory', 'kinesthetic', 'readingWriting']),
  tone: z.enum(['fun', 'serious', 'academic', 'motivational', 'satirical', 'friendly', 'reflective', 'inspirational']),
  suitability_for_adaptive_learning: z.number(),
  adaptive_learning_recommendations: z.string(),
  practical_application_score: z.number(),
  practical_application_details: z.string(),
  SMART_goal_check: z.boolean(),
  SMART_criteria: z.object({
    specific: z.boolean(),
    measurable: z.boolean(),
    achievable: z.boolean(),
    relevant: z.boolean(),
    time_bound: z.boolean()
  }),
  bloom_taxonomy_level: z.string(),
  bloom_taxonomy_reasoning: z.string(),
  cognitive_load_assessment: z.string(),
  mastery_learning_applicability: z.boolean(),
  UDL_compliance: z.boolean(),
  skills_21st_century: z.array(z.string()).optional(),
  standard_classification: z.object({
    code: z.string(),
    description: z.string()
  }).optional(),
  recommended_learning_frameworks: z.array(z.string()).optional(),
  learning_style_alignment: z.array(z.string()).optional(),
  sub_learning_objectives: z.array(z.string()).optional(),
  prerequisites: z.array(z.string()).optional(),
  estimated_time_to_complete: z.string().optional(),
  recommended_content_types: z.array(z.string()).optional(),
  potential_challenges: z.string().optional(),
  assessment_methods: z.array(z.string()).optional(),
  expected_competencies: z.array(z.string()).optional(),
  personalization_options: z.string().optional(),
  engagement_strategies: z.array(z.string()).optional(),
  estimated_timeframe: z.number(),
  timeframe_adjustment_reasoning: z.string().optional(),
  mitigation_strategies: z.string(),
  lang: z.string().optional().describe('ISO 639-1 language code (e.g., en for English)'),
  languageName: z.string().optional().describe('Human-readable language name (e.g., English)'),
  countryCode: z.string().optional().describe('ISO 3166-1 alpha-2 country code (e.g., US for United States)'),
  countryName: z.string().optional().describe('Human-readable country name (e.g., United States)')
})
